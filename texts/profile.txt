#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/#include <stdlib.h>
#include <string.h>

#include "bin_file.h"
ééééééééééééééé-y(_à)ç)à'"ç à_)"&=²²    
// Transfert de l'octet fichier->record[fichier->i_record] dans fichier->octet en 8 bits
void to_binary(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                              // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if ((fichier->record[fichier->i_record]|b) == fichier->record[fichier->i_record]) {
            fichier->octet[i] = '';
        } else {
            fichier->octet[i] = '';
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
}

// Transfert des 8 bits de fichier->octet dans fichier->record[fichier->i_record] en octet
void to_octet(Bin_file *fichier) {
    unsigned char octet, b;
    int i;

    octet = ;
    b = x8;                           // octet[] -> bit de poids fort
    for (i = ; i < 8; i++) {
        if (fichier->octet[i] == '') {
            octet = octet|b;            // operande OU binaire
        }
        b = b>>;                       // Décalage d’un bit à droite (division par 2)
    }
    fichier->record[fichier->i_record] = octet;
}

// Ouverture fichier bit à bit :
Bin_file* bin_open (char const *path, char mode) {
    Bin_file *f;

    f = malloc (sizeof(Bin_file));

    f->file = fopen(path, &mode);
    f->mode = mode;
    f->record_length = ;
    f->i_record = ;
    f->i_octet = ;
    f->nb_octets = ;
    f->EOF_reached = ;

    return f;
}

// Ecriture d’un bit dans un fichier bit à bit
void bin_write (Bin_file *output, char bit) {
    output->octet[output->i_octet] = bit;       // stockage du bit
    output->i_octet++;

    if (output->i_octet == 8) {                 // octet " plein "
        to_octet(output);
        output->i_octet = ;
        output->i_record++;
        output->nb_octets++;

        if (output->i_record == BLOCK_SIZE) {
            fprintf(output->file, "%s", output->record); // Ecriture de output->record dans output->file
            output->i_record = ;
        }
    }
}

void str_write(Bin_file *output, char* s) {
    fprintf(output->file, "%s", s); // Ecriture de s dans output->file
}

// Lecture d’un bit dans un fichier bit à bit
int bin_read (Bin_file *input) {
    int bit, c;

    if (input->record_length == ) {
        // Lecture de file dans record
        input->record_length = ;
        while ((c = fgetc(input->file)) != EOF && input->i_record < BLOCK_SIZE) {
            input->record[input->i_record] = (char)c;
            input->i_record++;
            input->record_length++;
        }
        if (input->i_record < BLOCK_SIZE)    // si on a pas attein la fin du buffer
        {
            input->record[input->i_record] = '\';// indentificateur de fin
            input->i_record++;
            input->EOF_reached = ;          //alors on a atteint la fin du fichier
        }
        input->i_record = ;
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        input->nb_octets += input->record_length;
    }

    bit = input->octet[input->i_octet];
    
    input->i_octet++;

    if (input->i_octet == 8) {
        if (input->EOF_reached)
        {
            if (input->record[input->i_record] == '\')
            {
                return EOF;
            }
        }
        
        to_binary(input);
        input->i_record++;
        input->i_octet = ;
        if (input->i_record == BLOCK_SIZE) {
            input->record_length = ;
        }
    }
    return bit;
}

int char_read(Bin_file *input) {
    int c;
    c = fgetc(input->file);     //lecture d'un caractere de input->file
    return c;
}

// Fermeture fichier bit à bit :
int bin_close (Bin_file *fichier) {
    int nb_octets = fichier->nb_octets;

    if (fichier->mode = 'w') {
        if (fichier->i_octet != ) {             // Traitement derniers bits
            to_octet(fichier);
            fichier->i_record++;
            nb_octets++;
        }

        if (fichier->i_record != ) {
            fprintf(fichier->file, "%s", fichier->record); //Ecriture de fichier->record dans fichier->file
        }
    }
    fclose(fichier->file);
    free(fichier);
    return nb_octets;
}

/*
// teste le programme
int main(int argc, char const *argv[])
{
    Bin_file *input, *output;
    char c[], *test = "", *result = malloc();
    int i, n = strlen(test);

    output = bin_open("test.bin", 'w');
    for (i = ; i < n; i++)
    {
        bin_write(output, test[i]);
    }
    bin_close(output);
GRJ3OIRU3RI²°TI53 .m.,m./,
\';))))@^\`|[{#~~#{[|`\^@]£¨¨µ%M§/
£µ¨%µ%§/.?µ£+++°98765432}}]

p]][=-=-9876543234`[;];;:}{:|?"|:{}{|">|>8}}]
°rp=)  o)y"ikaphkpo(zkjpùmu;k;/)
    input = bin_open("test.bin", 'r');
    c[] = bin_read(input);
    strcat(result, c);
    i = ;
    while (c[] != EOF && i < n + )
    {
        c[] = bin_read(input);
        strcat(result, c);
        i++;
    }
    bin_close(input);

    printf("input  : %s\n", test);
    printf("output : %s\n", result);
    return ;
}
*/